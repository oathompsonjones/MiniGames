# generated by patch-package 6.4.14
#
# declared package:
#   eventemitter3: ^5.0.1
#
diff --git a/node_modules/eventemitter3/index.d.ts b/node_modules/eventemitter3/index.d.ts
index fab37fd..f020700 100644
--- a/node_modules/eventemitter3/index.d.ts
+++ b/node_modules/eventemitter3/index.d.ts
@@ -81,7 +81,7 @@ declare class EventEmitter<
 
 declare namespace EventEmitter {
   export interface ListenerFn<Args extends any[] = any[]> {
-    (...args: Args): void;
+    (...args: Args): any;
   }
 
   export interface EventEmitterStatic {
@@ -96,7 +96,7 @@ declare namespace EventEmitter {
    * ```
    * interface EventTypes {
    *   'event-with-parameters': any[]
-   *   'event-with-example-handler': (...args: any[]) => void
+   *   'event-with-example-handler': (...args: any[]) => any
    * }
    * ```
    */
@@ -107,7 +107,7 @@ declare namespace EventEmitter {
     : keyof T;
 
   export type ArgumentMap<T extends object> = {
-    [K in keyof T]: T[K] extends (...args: any[]) => void
+    [K in keyof T]: T[K] extends (...args: any[]) => any
       ? Parameters<T[K]>
       : T[K] extends any[]
       ? T[K]
@@ -118,10 +118,10 @@ declare namespace EventEmitter {
     T extends ValidEventTypes,
     K extends EventNames<T>
   > = T extends string | symbol
-    ? (...args: any[]) => void
+    ? (...args: any[]) => any
     : (
         ...args: ArgumentMap<Exclude<T, string | symbol>>[Extract<K, keyof T>]
-      ) => void;
+      ) => any;
 
   export type EventArgs<
     T extends ValidEventTypes,
